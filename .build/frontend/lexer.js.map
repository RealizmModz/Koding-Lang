{
  "version": 3,
  "sources": ["../../frontend/lexer.ts"],
  "sourcesContent": ["export enum TokenType {\n  Null,\n  Number,\n  Identifier,\n  Let,\n  BinaryOperator,\n  Equals,\n  OpenParen,\n  CloseParen,\n  EOF,\n}\n\nconst KEYWORDS: Record<string, TokenType> = {\n  let: TokenType.Let,\n  null: TokenType.Null,\n};\n\nexport interface Token {\n  value: string;\n  type: TokenType;\n}\n\nfunction token(value = \"\", type: TokenType): Token {\n  return { value, type };\n}\n\nfunction isalpha(src: string) {\n  return src.toUpperCase() != src.toLowerCase();\n}\n\nfunction isskippable(str: string) {\n  return str == \" \" || str == \"\\n\" || str == \"\\t\";\n}\n\nfunction isint(str: string) {\n  const c = str.charCodeAt(0);\n  const bounds = [\"0\".charCodeAt(0), \"9\".charCodeAt(0)];\n  return c >= bounds[0] && c <= bounds[1];\n}\n\nexport function tokenize(sourceCode: string): Token[] {\n  const tokens = new Array<Token>();\n  const src = sourceCode.split(\"\");\n\n  while (src.length > 0) {\n    if (src[0] == \"(\") {\n      tokens.push(token(src.shift(), TokenType.OpenParen));\n    } else if (src[0] == \")\") {\n      tokens.push(token(src.shift(), TokenType.CloseParen));\n    }\n    else if (\n      src[0] == \"+\" || src[0] == \"-\" || src[0] == \"*\" || src[0] == \"/\" ||\n      src[0] == \"%\"\n    ) {\n      tokens.push(token(src.shift(), TokenType.BinaryOperator));\n    }\n    else if (src[0] == \"=\") {\n      tokens.push(token(src.shift(), TokenType.Equals));\n    }\n    else {\n      if (isint(src[0])) {\n        let num = \"\";\n        while (src.length > 0 && isint(src[0])) {\n          num += src.shift();\n        }\n\n        tokens.push(token(num, TokenType.Number));\n      }\n      else if (isalpha(src[0])) {\n        let ident = \"\";\n        while (src.length > 0 && isalpha(src[0])) {\n          ident += src.shift();\n        }\n\n        const reserved = KEYWORDS[ident];\n        if (typeof reserved == \"number\") {\n          tokens.push(token(ident, reserved));\n        } else {\n          tokens.push(token(ident, TokenType.Identifier));\n        }\n      } else if (isskippable(src[0])) {\n        src.shift();\n      } \n      else {\n        console.error(\n          \"Unreconized character found in source: \",\n          src[0].charCodeAt(0),\n          src[0],\n        );\n        Deno.exit(1);\n      }\n    }\n  }\n\n  tokens.push({ type: TokenType.EOF, value: \"EndOfFile\" });\n  return tokens;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,IAAK,YAAL,kBAAKA,eAAL;AACL,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AACA,EAAAA,sBAAA;AATU,SAAAA;AAAA,GAAA;AAYZ,MAAM,WAAsC;AAAA,EAC1C,KAAK;AAAA,EACL,MAAM;AACR;AAOA,SAAS,MAAM,QAAQ,IAAI,MAAwB;AACjD,SAAO,EAAE,OAAO,KAAK;AACvB;AAEA,SAAS,QAAQ,KAAa;AAC5B,SAAO,IAAI,YAAY,KAAK,IAAI,YAAY;AAC9C;AAEA,SAAS,YAAY,KAAa;AAChC,SAAO,OAAO,OAAO,OAAO,QAAQ,OAAO;AAC7C;AAEA,SAAS,MAAM,KAAa;AAC1B,QAAM,IAAI,IAAI,WAAW,CAAC;AAC1B,QAAM,SAAS,CAAC,IAAI,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,CAAC;AACpD,SAAO,KAAK,OAAO,MAAM,KAAK,OAAO;AACvC;AAEO,SAAS,SAAS,YAA6B;AACpD,QAAM,SAAS,IAAI,MAAa;AAChC,QAAM,MAAM,WAAW,MAAM,EAAE;AAE/B,SAAO,IAAI,SAAS,GAAG;AACrB,QAAI,IAAI,MAAM,KAAK;AACjB,aAAO,KAAK,MAAM,IAAI,MAAM,GAAG,iBAAmB,CAAC;AAAA,IACrD,WAAW,IAAI,MAAM,KAAK;AACxB,aAAO,KAAK,MAAM,IAAI,MAAM,GAAG,kBAAoB,CAAC;AAAA,IACtD,WAEE,IAAI,MAAM,OAAO,IAAI,MAAM,OAAO,IAAI,MAAM,OAAO,IAAI,MAAM,OAC7D,IAAI,MAAM,KACV;AACA,aAAO,KAAK,MAAM,IAAI,MAAM,GAAG,sBAAwB,CAAC;AAAA,IAC1D,WACS,IAAI,MAAM,KAAK;AACtB,aAAO,KAAK,MAAM,IAAI,MAAM,GAAG,cAAgB,CAAC;AAAA,IAClD,OACK;AACH,UAAI,MAAM,IAAI,EAAE,GAAG;AACjB,YAAI,MAAM;AACV,eAAO,IAAI,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG;AACtC,iBAAO,IAAI,MAAM;AAAA,QACnB;AAEA,eAAO,KAAK,MAAM,KAAK,cAAgB,CAAC;AAAA,MAC1C,WACS,QAAQ,IAAI,EAAE,GAAG;AACxB,YAAI,QAAQ;AACZ,eAAO,IAAI,SAAS,KAAK,QAAQ,IAAI,EAAE,GAAG;AACxC,mBAAS,IAAI,MAAM;AAAA,QACrB;AAEA,cAAM,WAAW,SAAS;AAC1B,YAAI,OAAO,YAAY,UAAU;AAC/B,iBAAO,KAAK,MAAM,OAAO,QAAQ,CAAC;AAAA,QACpC,OAAO;AACL,iBAAO,KAAK,MAAM,OAAO,kBAAoB,CAAC;AAAA,QAChD;AAAA,MACF,WAAW,YAAY,IAAI,EAAE,GAAG;AAC9B,YAAI,MAAM;AAAA,MACZ,OACK;AACH,gBAAQ;AAAA,UACN;AAAA,UACA,IAAI,GAAG,WAAW,CAAC;AAAA,UACnB,IAAI;AAAA,QACN;AACA,aAAK,KAAK,CAAC;AAAA,MACb;AAAA,IACF;AAAA,EACF;AAEA,SAAO,KAAK,EAAE,MAAM,aAAe,OAAO,YAAY,CAAC;AACvD,SAAO;AACT;",
  "names": ["TokenType"]
}

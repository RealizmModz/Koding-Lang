{
  "version": 3,
  "sources": ["../../runtime/interpreter.ts"],
  "sourcesContent": ["import { NullVal, NumberVal, RuntimeVal } from \"./values.ts\";\nimport { BinaryExpr, NumericLiteral, Program, Stmt } from \"../frontend/ast.ts\";\n\nfunction eval_program(program: Program, env: Environment): RuntimeVal {\n\tlet lastEvaluated: RuntimeVal = { type: \"null\", value: \"null\" } as NullVal;\n\tfor (const statement of program.body) {\n\t\tlastEvaluated = evaluate(statement, env);\n\t}\n\treturn lastEvaluated;\n}\n\nfunction eval_numeric_binary_expr(\n\tlhs: NumberVal,\n\trhs: NumberVal,\n\toperator: string,\n): NumberVal {\n\tlet result: number;\n\tif (operator == \"+\") {\n\t\tresult = lhs.value + rhs.value;\n\t} else if (operator == \"-\") {\n\t\tresult = lhs.value - rhs.value;\n\t} else if (operator == \"*\") {\n\t\tresult = lhs.value * rhs.value;\n\t} else if (operator == \"/\") {\n\t\tresult = lhs.value / rhs.value;\n\t} else {\n\t\tresult = lhs.value % rhs.value;\n\t}\n\n\treturn { value: result, type: \"number\" };\n}\n\nfunction eval_binary_expr(binop: BinaryExpr, env: Environment): RuntimeVal {\n\tconst lhs = evaluate(binop.left, env);\n\tconst rhs = evaluate(binop.right, env);\n\n\tif (lhs.type == \"number\" && rhs.type == \"number\") {\n\t\treturn eval_numeric_binary_expr(\n\t\t\tlhs as NumberVal,\n\t\t\trhs as NumberVal,\n\t\t\tbinop.operator,\n\t\t);\n\t}\n\n\treturn { type: \"null\", value: \"null\" } as NullVal;\n}\n\nfunction eval_identifier (ident: Identifier, env: Environment): RuntimeVal {\n\tconst val = env.lookupVar(ident.symbol);\n\treturn val;\n}\n\nexport function evaluate(astNode: Stmt, env: Environment): RuntimeVal {\n\tswitch (astNode.kind) {\n\t\tcase \"NumericLiteral\":\n\t\t\treturn {\n\t\t\t\tvalue: ((astNode as NumericLiteral).value),\n\t\t\t\ttype: \"number\",\n\t\t\t} as NumberVal;\n\t\tcase \"NullLiteral\":\n\t\t\treturn { value: \"null\", type: \"null\" } as NullVal;\n\t\tcase \"Identifier\":\n\t\t\treturn eval_identifier(astNode as Identifier, env);\n\t\tcase \"BinaryExpr\":\n\t\t\treturn eval_binary_expr(astNode as BinaryExpr, env);\n\t\tcase \"Program\":\n\t\t\treturn eval_program(astNode as Program, env);\n\n\t\tdefault:\n\t\t\tconsole.error(\n\t\t\t\t\"This AST Node has not yet been setup for interpretation.\",\n\t\t\t\tastNode,\n\t\t\t);\n\t\t\tDeno.exit(0);\n\t}\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,SAAS,aAAa,SAAkB,KAA8B;AACrE,MAAI,gBAA4B,EAAE,MAAM,QAAQ,OAAO,OAAO;AAC9D,aAAW,aAAa,QAAQ,MAAM;AACrC,oBAAgB,SAAS,WAAW,GAAG;AAAA,EACxC;AACA,SAAO;AACR;AAEA,SAAS,yBACR,KACA,KACA,UACY;AACZ,MAAI;AACJ,MAAI,YAAY,KAAK;AACpB,aAAS,IAAI,QAAQ,IAAI;AAAA,EAC1B,WAAW,YAAY,KAAK;AAC3B,aAAS,IAAI,QAAQ,IAAI;AAAA,EAC1B,WAAW,YAAY,KAAK;AAC3B,aAAS,IAAI,QAAQ,IAAI;AAAA,EAC1B,WAAW,YAAY,KAAK;AAC3B,aAAS,IAAI,QAAQ,IAAI;AAAA,EAC1B,OAAO;AACN,aAAS,IAAI,QAAQ,IAAI;AAAA,EAC1B;AAEA,SAAO,EAAE,OAAO,QAAQ,MAAM,SAAS;AACxC;AAEA,SAAS,iBAAiB,OAAmB,KAA8B;AAC1E,QAAM,MAAM,SAAS,MAAM,MAAM,GAAG;AACpC,QAAM,MAAM,SAAS,MAAM,OAAO,GAAG;AAErC,MAAI,IAAI,QAAQ,YAAY,IAAI,QAAQ,UAAU;AACjD,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA,MAAM;AAAA,IACP;AAAA,EACD;AAEA,SAAO,EAAE,MAAM,QAAQ,OAAO,OAAO;AACtC;AAEA,SAAS,gBAAiB,OAAmB,KAA8B;AAC1E,QAAM,MAAM,IAAI,UAAU,MAAM,MAAM;AACtC,SAAO;AACR;AAEO,SAAS,SAAS,SAAe,KAA8B;AACrE,UAAQ,QAAQ,MAAM;AAAA,IACrB,KAAK;AACJ,aAAO;AAAA,QACN,OAAS,QAA2B;AAAA,QACpC,MAAM;AAAA,MACP;AAAA,IACD,KAAK;AACJ,aAAO,EAAE,OAAO,QAAQ,MAAM,OAAO;AAAA,IACtC,KAAK;AACJ,aAAO,gBAAgB,SAAuB,GAAG;AAAA,IAClD,KAAK;AACJ,aAAO,iBAAiB,SAAuB,GAAG;AAAA,IACnD,KAAK;AACJ,aAAO,aAAa,SAAoB,GAAG;AAAA,IAE5C;AACC,cAAQ;AAAA,QACP;AAAA,QACA;AAAA,MACD;AACA,WAAK,KAAK,CAAC;AAAA,EACb;AACD;",
  "names": []
}
